'''
This file contains all imports and functions related to giving outputs
From the logic.py file, relevant functions from out.py are called
GPIO outputs CANT be done from outside this file, since only this imports GPIO
'''

import RPi.GPIO as GPIO

class out:
    # setup function for all output sources
    def __init__(self, yaw_obj, machine_obj):
        # relevant control variables accessed as data associated with objects passed from main file
        self.yaw = yaw_obj
        self.machine = machine_obj

        # defining relevant output pins, used by functions inside this file
        self.motor_pin = 17
        self.brake_pin = 27
        self.cw_contactor = 23
        self.acw_contactor = 24

        # GPIO output modes for the raspi
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.brake_pin, GPIO.OUT)
        GPIO.setup(self.motor_pin, GPIO.OUT)
        GPIO.setup(self.acw_contactor, GPIO.OUT)
        GPIO.setup(self.cw_contactor, GPIO.OUT)

        # initialize outputs
        GPIO.output(self.motor_pin, GPIO.LOW) # machine OFF initially
        GPIO.output(self.brake_pin, GPIO.HIGH) # break ON initially
        GPIO.output(self.acw_contactor, GPIO.LOW)
        GPIO.output(self.cw_contactor, GPIO.LOW)

    # --------------------YAW OUTPUTS--------------------
    
    # turns on ONE of the contactors depending upon direction
    # needs direction input (cw or anticlockwise), generated by yaw.py file
    def yaw_out(self):
        dir = self.yaw.direction
        out_val = [GPIO.LOW, GPIO.HIGH]
        GPIO.output(self.acw_contactor, out_val[dir])
        GPIO.output(self.cw_contactor, out_val[not dir])
        
    # turn off both the contactors
    # to be called after yawing is done
    def shutdown_yaw(self):
        GPIO.output(self.acw_contactor, GPIO.LOW)
        GPIO.output(self.cw_contactor, GPIO.LOW)

    # --------------------MACHINE OUTPUTS--------------------

    # sets motor and brake values as what was calculated
    def machine_out(self):
        out_val = [GPIO.LOW, GPIO.HIGH]
        GPIO.output(self.motor_pin, out_val[self.machine.motor])
        GPIO.output(self.brake_pin, out_val[self.machine.brake])
    
    # sets the brake, used coinciding with yawing motion
    def brake_on(self):
        GPIO.output(self.motor_pin, GPIO.LOW)
        GPIO.output(self.brake_pin, GPIO.HIGH)

    # --------------------GPIO STUFF--------------------
        
    def cleanup(self):
        GPIO.cleanup()