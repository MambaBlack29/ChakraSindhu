'''
This file contains all imports and functions related to giving outputs
From the logic.py file, relevant functions from out.py are called
GPIO outputs CANT be done from outside this file, since only this imports GPIO
'''
from machine import machine
from yaw import yaw

import RPi.GPIO as GPIO

class out:
    '''
    Output class to control the Turbine based on the logical values
    Control the motor and brake based on the wind speed and machine speed
    Control the contactors(Turbine yaw) based on the yaw direction
    
    Attributes:
    ----------
    yaw: object of yaw class
        Contains all the data of wind speed and direction, nacelle direction and machine speed, and logic to update them.
    machine: object of machine class
        Machine object to control the Turbine based on wind speed and machine speed.
        Control the motor and brake based on the wind speed and machine speed.
    '''
    # setup function for all output sources
    def __init__(self, yaw_obj: yaw, machine_obj: machine):
        '''
        Initialize the output object with the yaw and machine objects
        Initialize the GPIO pins for the motor, brake and contactors
        Initialize the motor and brake values as OFF and ON respectively
        Initialize the contactors as OFF
        '''
        # relevant control variables accessed as data associated with objects passed from main file
        self.yaw = yaw_obj
        self.machine = machine_obj

        # defining relevant output pins, used by functions inside this file
        self.motor_pin = 17
        self.brake_pin = 27
        self.cw_contactor = 23
        self.acw_contactor = 24

        # GPIO output modes for the raspi
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.brake_pin, GPIO.OUT)
        GPIO.setup(self.motor_pin, GPIO.OUT)
        GPIO.setup(self.acw_contactor, GPIO.OUT)
        GPIO.setup(self.cw_contactor, GPIO.OUT)

        # initialize outputs
        GPIO.output(self.motor_pin, GPIO.LOW) # machine OFF initially
        GPIO.output(self.brake_pin, GPIO.HIGH) # break ON initially
        GPIO.output(self.acw_contactor, GPIO.LOW)
        GPIO.output(self.cw_contactor, GPIO.LOW)

    # --------------------YAW OUTPUTS--------------------
    def yaw_out(self):
        '''
        turns on ONE of the contactors and turns OFF the other depending on the direction
        Needs direction input (cw or anticlockwise), generated by yaw.py file
        '''
        dir = self.yaw.direction
        out_val = [GPIO.LOW, GPIO.HIGH]
        GPIO.output(self.acw_contactor, out_val[dir])
        GPIO.output(self.cw_contactor, out_val[not dir])
        
    def shutdown_yaw(self):
        '''
        turn off both the contactors
        to be called after yawing is done
        '''
        GPIO.output(self.acw_contactor, GPIO.LOW)
        GPIO.output(self.cw_contactor, GPIO.LOW)

    # --------------------MACHINE OUTPUTS--------------------

    def machine_out(self):
        '''
        sets motor and brake values as what was calculated
        '''
        out_val = [GPIO.LOW, GPIO.HIGH]
        GPIO.output(self.motor_pin, out_val[self.machine.motor])
        GPIO.output(self.brake_pin, out_val[self.machine.brake])
    
    def brake_on(self):
        '''
        sets the brake, used coinciding with yawing motion
        '''
        GPIO.output(self.motor_pin, GPIO.LOW)
        GPIO.output(self.brake_pin, GPIO.HIGH)


    # --------------------GPIO STUFF--------------------
        
    def cleanup(self):
        '''
        Cleans up all the GPIO pins
        '''
        GPIO.cleanup()